<?php
namespace app\admin\controller;

use Admin\Model\AdminModel;
use app\admin\model\Admin;
use app\common\controller\AdminBase;
use app\admin\model\Manager as ManagerModel;
use app\admin\validate\Manager as ManagerCheck;

/**
 * 管理员控制器
 * Class Manager
 * @package app\admin\controller
 */
class Manager extends AdminBase
{
    //要操作的管理员id
    protected $admin_id;
    //实例化模型
    protected $adminModel;
    //实例化验证器
    protected $validate;

    //初始化方法
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->adminModel = new ManagerModel;
        $aciton = $this->request->action();

        if ($aciton != 'index') {
            $this->admin_id = $this->request->param('manager_id');

            if (!isInteger($this->admin_id) && !in_array($aciton, ['index', 'add'])) {
                $this->Response('缺少参数或参数错误！');
            }

            if ($this->request->isAjax()) {
                $this->validate = new ManagerCheck;

                if ($aciton != 'add') {
                    $admin_pid = $this->adminModel->where('admin_id', $this->admin_id)->value('pid');

                    if ($aciton == 'edit') {
                        $msg = '只能对自己或下级管理员操作！';
                    } else {
                        $msg = '只能对下级管理员操作！';
                    }

                    if ($this->admin_info['level'] != 1) {
                        if ($this->admin_id != $this->admin_info['admin_id'] && $admin_pid != $this->admin_info['admin_id']) {
                            return $this->Response($msg);
                        }
                    }
                }
            }
        }
    }

    //管理员列表
    public function index()
    {
        $admin_id = $this->request->get('manager_id');
        $admin_name = $this->request->get('manager_name');
        $status = $this->request->get('status');
        $managers = $this->adminModel->getAdminList($this->admin_info, $admin_id, $admin_name, $status);

        if ($managers && !$admin_name) {
           if ($this->admin_info['level'] == 1 && !$status && !$admin_id) {
               $managers = unlimited($managers, 'pid', 'admin_id', 0, 0, '&nbsp;&nbsp;&nbsp;');
           } else if (!$admin_id) {
               $managers = unlimited($managers, 'pid', 'admin_id', $this->admin_info['admin_id'], 0, '&nbsp;&nbsp;&nbsp;');
           }
        }

        $this->assign([
            'managers' => $managers,
            'manager_edit' => stripos($this->my_rules, 'manager/edit'),
            'manager_delete' => stripos($this->my_rules, 'manager/delete'),
        ]);
        return $this->fetch();
    }

    //添加管理员
    public function add(){
        if ($this->request->isAjax()) {
            $data['admin_name'] = $this->request->post('manager_name');
            $data['admin_nickname'] = $this->request->post('manager_nickname');
            $data['admin_password'] = $this->request->post('password');
            $data['repassword'] = $this->request->post('repassword');
            $data['phone'] = $this->request->post('phone');
            $data['email'] = $this->request->post('email');

            if (!$this->validate->check($data)) {
                return $this->ajaxResponse($this->validate->getError());
            }

            $hasSameUserName = $this->adminModel->where('admin_name', $data['admin_name'])->value('admin_id');

            if ($hasSameUserName) {
               return $this->ajaxResponse('账号已存在，请重新输入！');
            }

            $data['admin_password'] = md5(sha1(md5($data['admin_password'])));
            $data['register_time'] = time();
            $data['pid'] = $this->admin_info['admin_id'];
            unset($data['repassword']);

            if ($this->adminModel->data($data)->save()) {
                return $this->ajaxResponse('ok', 1000);
            } else {
                return $this->ajaxResponse('添加数据失败！');
            }
        } else {
           return $this->fetch();
        }
    }

    //编辑管理员
    public function edit()
    {
        if ($this->request->isAjax()) {
            $data['admin_nickname'] = $this->request->post('manager_nickname');
            $data['admin_password'] = $this->request->post('password');
            $data['repassword'] = $this->request->post('repassword');
            $data['phone'] = $this->request->post('phone');
            $data['email'] = $this->request->post('email');
            $validate = new ManagerCheck;

            if (!$validate->scene('edit')->check($data)) {
                return $this->ajaxResponse($validate->getError());
            }

            if (!empty($data['admin_password'])) {
                $data['admin_password'] = md5(sha1(md5($data['admin_password'])));
            } else {
                unset($data['admin_password']);
            }

            unset($data['repassword']);

            if ($this->adminModel->save($data, ['admin_id' => $this->admin_id])) {
                return $this->ajaxResponse('ok', 1000);
            } else {
                return $this->ajaxResponse('编辑管理员失败！');
            }
        } else {
            $info = $this->adminModel->get($this->admin_id);

            if ($info['level'] == 1 && $this->admin_info['level'] != 1) {
                $this->error('管理员不能编辑超级管理员！');
            }

            $this->assign('info', $info);
            return $this->fetch();
        }
    }

    //屏蔽管理员
    public function yesOrNo()
    {
        if ($this->request->isAjax()) {
            $admin_info = $this->adminModel->field('status,level')->where('admin_id', $this->admin_id)->find();

            if ($admin_info->level == 1) {
                return $this->ajaxResponse('不能屏蔽超级管理员！');
            }

            if ($admin_info->status == 2){
                //正常
                $this->adminModel->save(['status' => 1], ['admin_id' => $this->admin_id]);
                return $this->ajaxResponse('yes', 1000);
            } else {
                //屏蔽
                $this->adminModel->save(['status' => 2], ['admin_id' => $this->admin_id]);
                return $this->ajaxResponse('no', 1000);
            }
        }
    }

    //删除管理员
    public function del(){
        if ($this->request->isAjax()) {
            if ($this->admin_id == $this->admin_info['admin_id']) {
                return $this->ajaxResponse('不能删除自己！');
            }

            if ($this->adminModel->where('admin_id', $this->admin_id)->value('level') == 1) {
                return $this->ajaxResponse('不能删除超级管理员！');
            }

            $is_son = $this->adminModel->where(['pid' => $this->admin_id,'status' => ['NEQ', 0]])->select();

            if (objectToArray($is_son)) {
                return $this->ajaxResponse('请先删除下级管理员！');
            }

            if ($this->adminModel->where('admin_id', $this->admin_id)->limit(1)->delete()) {
                return $this->ajaxResponse('ok', 1000);
            } else {
                return $this->ajaxResponse('删除数据失败！');
            }
        }
    }

    /**
     * 生成邀请码
     * @return string $code 数字字符
     * @author 商贸城的洋芋<bebubble@126.com>
     */
    protected function getInviteCode()
    {
        $code = generateInviteCode();

        if (M('admin')->where(array('invite_code' => $code))->find()) {
            $this->getInviteCode();
        } else {
            return $code;
        }
    }
}